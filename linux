Day 1:


- Introducing the linux shell
- The linux filesystem
- Working with files and directories
- Using text editor to create and edit files


echo $0 - This command is shows the current shell.


Wildcards and metacharacters:

The asterisk (*): This is used to match any string of noneor more characters.
-rm -rf *t
The files whcih end with the t all will be remove

-rm -rf f*
The files which start with f all will be remove 


The question mark (?): This is used to match a singlecharacter.

The brackets ([ ]): This is used to match any of thecharacters inside the brackets.

>: Output redirection.
echo "This is for redirection" > write : It add the line but its redirect the msg does not append

>>: Output redirection – append.
echo "Add this line for confirmetion" >> write: It is appending the msg in the write file

<: Input redirection.

<<: Input redirection.

*: File substitution wildcard 

?: File substitution wildcard 

[ ]: File substitution wildcard

|: Pipe for using multiple commands
ls -l /etc | less

;: Command execution sequence
who ; pwd

( ): Group of commands in the execution sequence

||: Conditional execution (OR)

&&: Conditional execution (AND)

&: Run a command in the background

#: Use a command directly in the shell

$: Variable value expansion

\: The escape characte

`cmd`: Command substitution
ls -la `which ls`

$(cmd): Command substitution

{}: This is used to create and delete more than one file or directory
1. rm Test/{onefile,twofile}
2. touch  file{1..5}


Day 2:

Bash shell variables-


HOME: The user's home directory (for example,/home/packt)
-echo $HOME - This command will give the current login user home directory

LOGNAME: The user's login name
-logname  This command will give you the login username

PWD: The shell's current working directory
pwd Or echo $PWD

OLDPWD: The shell's previous working directory
echo $OLDPWD

PATH: The shell's search path (list of directoriesseparated by colons)
echo $PATH

SHELL: The path to the shell
echo $SHELL

USER: The user's login name
echo $USER

TERM: The type of the terminal
echo $TERM


Day 3:

-The shell's search path

The PATH variable is an essential one in Linux. It helps theshell know where all the programs are located.
To make adirectory's path available temporarily, simply add it to thePATH variable.

We will add path to below:
/home/jay

PATH=$PATH:/home/jay

To make any changes permanent, you must modify thePATH variable inside a file called ~/.bash_profile or~/.bashrc.



-The shell's aliases


They are a veryconvenient way to create shorter commands as aliases forlonger ones.

To check current set alias:  
alias ll

To set temp alias:
alias ll= 'ls -ltrF'

This modification is only temporary, and it will revert to thedefault one after reboot or shell restart. If you want tomake it permanent, you should edit the 
~/.bashrc file.


Day 4:

-The shell connection:

Connections to the shell are made by using two differenttypes: tty and pts.

tty: The tty connection is considered anative one, with ports that are direct connections to yourcomputer.
The link between the user and the computer ismainly found to be through a keyboard, which is consideredto be a native terminal device. 
The name tty stands forteletypewriter, which was a type of terminal used at thebeginning of computing.


pts: The pts connection is generated by SSH or Telnet types oflinks. Its name stands for pseudo terminal slave and it is anemulated connection made by a program, 
n most cases sshor xterm. It is the slave of the pseudo-terminal device,which is pty.


Virtual consoles are accessible and run in the background,even though there is no open terminal.To access those
virtual consoles, you can use the commands Ctrl + Alt + F1 / Ctrl + Alt + F2, (…) Ctrl + Alt + F5, and Ctrl + Alt + F6.
These will open tty1, tty2, (…) tty 5, and tty6,

You will be able to use Ctrl + Alt + F7 to enter X graphical mode.


Using the chvt command we can change the current six terminal console. If you are on the secound terminal (tty2) so run below command:

sudo chvt 6


That will ask the password so give the username and password and you will access the terminal 6.


Day 5:


Shell command types:


There are two types of shell commands the first is internal shell commands and the secound is external shell command that install 
saperetaly. If you want to check the type of the command so use 'type' command:

example:  

jay@devopsprac:~$ type cd

cd is a shell builtin


-The Linux filesystem:



Exploring the Linux filesystem from the
command line:


Feel free to explore the filesystem yourself by using the
tree command.
 

Use below command is used to download the tree command:

$ sudo apt install tree


The tree command by invoking the -L option, which tells the command how many levels down to go.


jay@devopsprac:~$ tree -L 1 /
/
├── bin -> usr/bin
├── boot
├── cdrom
├── dev
├── etc
├── home
├── lib -> usr/lib
├── lib32 -> usr/lib32
├── lib64 -> usr/lib64
├── libx32 -> usr/libx32
├── lost+found
├── media
├── mnt
├── opt
├── proc
├── root
├── run
├── sbin -> usr/sbin
├── snap
├── srv
├── swapfile
├── sys
├── tmp
├── usr
└── var

24 directories, 1 file

That will show the content of the file by the level, You can give any level like 2,3 so that will show the content under the 
every directory.

tree -L 2 /
tree -L 3 /
=======================


The following are the directories that exist on almost all versions of Linux. Here's a quick overview of the Linux root
filesystem:

/: Root directory: the root for all other directories.


/bin: Essential command binaries: The place where binary programs are stored.


/boot: Static files of the boot loader: the place where the kernel, bootloader, and initramfs are stored.

/dev: Device files: nodes to the device equipment, a kernel device list.

/etc: Host-specific system configuration: essential config files for the system, boot time loading scripts, crontab,
fstab device storage tables, and the passwd user accounts file.

/home: the user's home directory: the place where the user's files are stored.

/lib: Essential shared libraries and kernel modules:
shared libraries are similar to Dynamic Link Library (DLL) files in Windows DLLs.


/media: Mount point for removable media: for external devices and USB external media.

/mnt: Mount point for mounting a filesystem temporarily: used for legacy systems.

/opt: Add-on application software packages: the place where optional software is installed.


/proc: Virtual filesystem managed by the kernel: a special directory structure that contains files essential
for the system.

/sbin: Essential system binaries: vital programs for the system's operation.


/srv: Data for services provided by this system.


/tmp: Temporary files.

/usr: Secondary hierarchy: the largest directory in Linux that contains support files for regular system users;

/usr/bin – system executable files; /usr/lib – shared libraries from /usr/bin; /usr/local – source compiled programs not included in the distribution; 

/usr/sbin – specific system administration programs;

/usr/share – data shared by the programs in /usr/bin like config files, icons, wallpapers or sound files; 

/usr/share/doc – documentation for the system-wide files.

/var: Variable data: only data that is modifiable by the user is stored here, such as databases, printing spool files, user mail, and others; /var/log – contains log files that register system activity.


-There are two types of paths in Linux, relative ones and absolute ones.

An absolute path always starts with the root,directory and follows the branches of the system up to the desired file.

A relative path always refers to the current working directory and represents the relative path to it.

The path in the final command is relative to our home directory and it translates as follows: concatenate the file

with the name passwd that is located in the /etc directory in the parent directory (first two dots) of the parent

directory (second two dots) of our current directory (home). Therefore, the /etc/passwd absolute path is

translated into a relative path to our home directory like this: ../../etc/passwd.


Day 6:


Basic file operations

Daily, as a system administrator, you will manipulate files.This includes creating, copying, moving, listing, deleting,linking and so 
on.



When we want to create the empty file so we can use the touch file to create the empty file. we create the file name as a new-report 

jay@devopsprac:~$ touch new-report

jay@devopsprac:~$ ls -la new-report

-rw-rw-r-- 1 jay jay 0 Jun 28 16:19 new-report



The touch command is also used to change the modification time of a file without changing the file itself.

Notice the difference between the initial time when we first created the new-report file and the new time after using
the touch command on it:

jay@devopsprac:~$ ls -la new-report
-rw-rw-r-- 1 jay jay 0 Jun 28 16:19 new-report

jay@devopsprac:~$ touch new-report

jay@devopsprac:~$ ls -la new-report
-rw-rw-r-- 1 jay jay 0 Jun 28 16:20 new-report


-touch -a: This command is used to change access time only. To change or update the last access or modification times of a file touch -acommand is used.


-touch -c : This command is used to check whether a file is created or not. If not created then don’t create it. This command avoids creating files.


-touch -c-d : This is used to update access and modification time.

jay@devopsprac:~$ touch -c -d '16 Sep' new-report

jay@devopsprac:~$ ls -la new-report

-rw-rw-r-- 1 jay jay 0 Sep 16  2021 new-report


touch -m : This is used to change the modification time only. It only updates last modification time.


touch -t : This is used to create a file using a specified time.
sentax: touch -t YYMMDDHHMM fileName

jay@devopsprac:~$ touch -t 202006281224 new-report

jay@devopsprac:~$ ls -la new-report

-rw-rw-r-- 1 jay jay 0 Jun 28  2020 new-report


If you want to see the access time, there is the atime parameter you can use with the - time option:

ls -la --time=atime new-report


jay@devopsprac:~$ ls -la --time=atime new-report

-rw-rw-r-- 1 jay jay 0 Jun 28  2020 new-report


This mostly used with the find command.



-The echo command:

Files can also be created by using redirection and the echo
command.

Also echo command print the output :


Example:

jay@devopsprac:~$ echo text
text

jay@devopsprac:~$ echo "text"
text

jay@devopsprac:~$ echo 'text'
text
================


Now we can understand how exactly we can write the text and redirect into one file using the echo command.


1) jay@devopsprac:~$ echo This is the presentation file > presentation

   jay@devopsprac:~$ cat presentation

   This is the presentation file

2) jay@devopsprac:~$ echo The new line added >> presentation
   
   jay@devopsprac:~$ cat presentation

   This is the presentation file
   The new line added

The first echo command added a line to the fileby using the > operator. The second echo command
appended a new line of text to the end of the file, by using
the >> operator.


=================


Listing files:


ls command we used for the listing the content. here are some examples and the options for using the ls command:

ls -lh: The -l option lists the files in an extended format, while the -h option shows them in a human-readable form, with the size in kilobytes or megabytes rather than
bytes.



ls -la: The -a option shows all the files, including hidden ones. Combined with the -l option, the output will be a list of all the 
files and their details.


ls -ltr: The -t option sorts files by their modification time, showing the newest first; the -r option reverses the order of the sort.

ls – lS: The -S option sorts the files by their size, with the largest file first.

ls -R: The -R option shows the contents of the current or specified directory in recursive mode.


================


-Copying and moving files:


To copy files in Linux, the cp command is used. The mv command moves files around the filesystem. This command
is also used to rename files.


To copy a file, you can use the cp command in the simplest
way:

cp oldfile newfile


cp filename destinetion of the path

cp testfile /home/jay/Document

options:

cp -a: The -a option copies an entire directory hierarchy in
recursive mode by preserving all the attributes and links.

cp -r: This option is similar to -a, but it does not preserve
attributes, only symbolic links.

cp -p: The -p option retains the file's permissions and timestamps. Otherwise, just by using cp in its simplest form, copies of
the files will be owned by your user with a timestamp of the time you did the copy operation.

cp -R: The -R option allows you to copy a directory recursively. 







